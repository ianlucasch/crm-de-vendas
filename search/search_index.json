{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Projeto CRM de Vendas","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Modelo de produtos.</p> Source code in <code>src\\contrato.py</code> <pre><code>class ProdutoEnum(str, Enum):\n    \"\"\"\n    Modelo de produtos.\n    \"\"\"\n    produto1 = \"FlowDisk com Gemini\"\n    produto2 = \"FlowDisk com ChatGPT\"\n    produto3 = \"FlowDisk com Llama 3.0\"\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Modelo de dados para vendas.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>Email do vendedor</p> required <code>data</code> <code>datetime</code> <p>Data da venda</p> required <code>valor</code> <code>PositiveFloat</code> <p>Valor da venda</p> required <code>quantidade</code> <code>PositiveInt</code> <p>Unidades vendidas</p> required <code>produto</code> <code>ProdutoEnum</code> <p>Nome do produto vendido</p> required Source code in <code>src\\contrato.py</code> <pre><code>class Vendas(BaseModel):\n    \"\"\"\n    Modelo de dados para vendas.\n\n    Args:\n        email (EmailStr): Email do vendedor\n        data (datetime): Data da venda\n        valor (PositiveFloat): Valor da venda\n        quantidade (PositiveInt): Unidades vendidas\n        produto (ProdutoEnum): Nome do produto vendido\n    \"\"\"\n    email: EmailStr\n    data: datetime\n    valor: PositiveFloat\n    quantidade: PositiveInt\n    produto: ProdutoEnum\n</code></pre> <p>Fun\u00e7\u00e3o para criar a tabela vendas e salvar os dados no banco de dados PostgreSQL.</p> Source code in <code>src\\database.py</code> <pre><code>def salvar_no_postgres(dados: Vendas):\n    \"\"\"\n    Fun\u00e7\u00e3o para criar a tabela vendas e salvar os dados no banco de dados PostgreSQL.\n    \"\"\"\n    try:\n        conn = psycopg2.connect(\n            host=DB_HOST,\n            database=DB_NAME,\n            user=DB_USER,\n            password=DB_PASS,\n            port=DB_PORT\n        )\n        cursor = conn.cursor()\n\n        create_table = sql.SQL(\n            \"CREATE TABLE IF NOT EXISTS vendas (id SERIAL PRIMARY KEY, email VARCHAR(255) NOT NULL, data TIMESTAMP NOT NULL, valor NUMERIC NOT NULL, quantidade INTEGER NOT NULL, produto VARCHAR(50) NOT NULL)\"\n        )\n        cursor.execute(create_table)\n\n        insert_query = sql.SQL(\n            \"INSERT INTO vendas (email, data, valor, quantidade, produto) VALUES (%s, %s, %s, %s, %s)\"\n        )\n        cursor.execute(insert_query, (\n            dados.email,\n            dados.data,\n            dados.valor,\n            dados.quantidade,\n            dados.produto.value,\n        ))\n\n        conn.commit()\n        cursor.close()\n        conn.close()\n        st.success(\"Dados salvos com sucesso no banco de dados!\")\n    except Exception as exc:\n        st.error(f\"Erro ao salvar no banco de dados: {exc}\")\n</code></pre> <p>Fun\u00e7\u00e3o para criar o frontend do CRM de Vendas.</p> Source code in <code>src\\frontend.py</code> <pre><code>def main():\n    \"\"\"\n    Fun\u00e7\u00e3o para criar o frontend do CRM de Vendas.\n    \"\"\"\n    st.title(\"CRM De Vendas - Frontend Simples\")\n    email = st.text_input(\"Email do vendedor\")\n    produto = st.selectbox(\"Selecione o produto\", options=[\"FlowDisk com Gemini\", \"FlowDisk com ChatGPT\", \"FlowDisk com Llama 3.0\"])\n    data = st.date_input(\"Data da venda\", datetime.now())\n    hora = st.time_input(\"Hora da venda\", value=time(9, 0))\n    quantidade = st.number_input(\"Unidades vendidas\", min_value=1, step=1)\n    valor = st.number_input(\"Valor da venda\", min_value=0.0, format=\"%.2f\")\n\n    if st.button(\"Salvar\"):\n        try:\n            data_hora = datetime.combine(data, hora)\n            venda = Vendas(\n                email=email,\n                data=data_hora,\n                valor=valor,\n                quantidade=quantidade,\n                produto=produto,\n            )\n            st.write(venda)\n            salvar_no_postgres(venda)\n        except ValidationError as exc:\n            st.error(f\"Erro: {exc}\")\n</code></pre>"}]}